{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Yaproq is a templating language powered by fast, secure, and powerful Swift language and uses a similar syntax to the Django, Jinja, and Twig templating languages but more Swifty. Features Custom delimiters Defaults {{ }} to output an expression {% %} to execute a statement {# #} to add a comment Loading templates Rendering templates Error handling Template inheritance Expressions Assignment (e.g. a = 1 , b = \"some text\" , etc) Binary (e.g. a + b , a > b , etc) Grouping (e.g. (a + b) * c ) Literal (e.g. 1 , 2.0 , \"some text\" , true , false , etc) Logical (e.g. && and || ) Range (e.g. 0..<3 and 1...4 ) Ternary (e.g. a > b ? \"a is greater\" : \"a is not greater\" ) Unary (e.g. !a and -b ) Variable (e.g. var a = 1 , var b = 2.0 , var c = \"some text\" , etc) Statements block extend for loop if , elseif , and else conditions include super while loop Memory caching with NSCache Todo A simple array, dictionary, and tuple declaration inside a template file Custom filters Logging and debugging","title":"Overview"},{"location":"#overview","text":"Yaproq is a templating language powered by fast, secure, and powerful Swift language and uses a similar syntax to the Django, Jinja, and Twig templating languages but more Swifty.","title":"Overview"},{"location":"#features","text":"Custom delimiters Defaults {{ }} to output an expression {% %} to execute a statement {# #} to add a comment Loading templates Rendering templates Error handling Template inheritance Expressions Assignment (e.g. a = 1 , b = \"some text\" , etc) Binary (e.g. a + b , a > b , etc) Grouping (e.g. (a + b) * c ) Literal (e.g. 1 , 2.0 , \"some text\" , true , false , etc) Logical (e.g. && and || ) Range (e.g. 0..<3 and 1...4 ) Ternary (e.g. a > b ? \"a is greater\" : \"a is not greater\" ) Unary (e.g. !a and -b ) Variable (e.g. var a = 1 , var b = 2.0 , var c = \"some text\" , etc) Statements block extend for loop if , elseif , and else conditions include super while loop Memory caching with NSCache","title":"Features"},{"location":"#todo","text":"A simple array, dictionary, and tuple declaration inside a template file Custom filters Logging and debugging","title":"Todo"},{"location":"installation/","text":"Installation Swift Download and install Swift 5.3 or higher. Swift Package Manager New Package This creates a new executable package named MyPackage . mkdir MyPackage cd MyPackage swift package init --type executable Package Manifest Add the Yaproq package as a dependency by specifying its name , url , and version . dependencies : [ . package ( name : \"yaproq\" , url : \"https://github.com/yaproq/yaproq.git\" , from : \"1.0.0\" ) ] Add the Yaproq target to your desired target as a dependency by specifying its name and package where you want to import and use it. In this case, we are adding it to the default target named MyPackage generated using the swift package init command we executed earlier. targets : [ . target ( name : \"MyPackage\" , dependencies : [ . product ( name : \"Yaproq\" , package : \"yaproq\" ) ]) ] Build This builds the MyPackage and installs the Yaproq package with the Debug configuration needed for development. swift build Once you are ready to deploy, you can run the command below that builds the MyPackage and installs the Yaproq package with the Release configuration optimized for production. swift build -c release Xcode Project Open your Xcode project. Go to File -> Swift Packages -> Add Package Dependency . Enter the Yaproq package URL: https://github.com/yaproq/yaproq.git . Choose the version you want to install. We suggest installing the latest stable version by using the Up to Next Major strategy. Add the Yaproq package to your desired target of the MyPackage where you want to import and use it.","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#swift","text":"Download and install Swift 5.3 or higher.","title":"Swift"},{"location":"installation/#swift-package-manager","text":"","title":"Swift Package Manager"},{"location":"installation/#new-package","text":"This creates a new executable package named MyPackage . mkdir MyPackage cd MyPackage swift package init --type executable","title":"New Package"},{"location":"installation/#package-manifest","text":"Add the Yaproq package as a dependency by specifying its name , url , and version . dependencies : [ . package ( name : \"yaproq\" , url : \"https://github.com/yaproq/yaproq.git\" , from : \"1.0.0\" ) ] Add the Yaproq target to your desired target as a dependency by specifying its name and package where you want to import and use it. In this case, we are adding it to the default target named MyPackage generated using the swift package init command we executed earlier. targets : [ . target ( name : \"MyPackage\" , dependencies : [ . product ( name : \"Yaproq\" , package : \"yaproq\" ) ]) ]","title":"Package Manifest"},{"location":"installation/#build","text":"This builds the MyPackage and installs the Yaproq package with the Debug configuration needed for development. swift build Once you are ready to deploy, you can run the command below that builds the MyPackage and installs the Yaproq package with the Release configuration optimized for production. swift build -c release","title":"Build"},{"location":"installation/#xcode-project","text":"Open your Xcode project. Go to File -> Swift Packages -> Add Package Dependency . Enter the Yaproq package URL: https://github.com/yaproq/yaproq.git . Choose the version you want to install. We suggest installing the latest stable version by using the Up to Next Major strategy. Add the Yaproq package to your desired target of the MyPackage where you want to import and use it.","title":"Xcode Project"},{"location":"usage/","text":"Usage Comments {# A single-line comment #} {# A multi-line comment #} Variables {% var int = 1 %} {% var float = 2.0 %} {% var string = \"some text\" %} {% var booleanTrue = true %} {% var booleanFalse = false %} {% var range = 0.. < 3 %} {% var closedRange = 1...4 %} {% var item0 = array[0] %} {% var value = dictionary[key] %} Math expressions {% var five = 5.0 %} {% var four = 4 %} {% var three = 3 %} {% var two = 2.0 %} {% var seven = 7.0 %} {% var six = 6 %} {% var one = 1.0 %} {% var result = five * four / (three + two) - seven % six ^ one %} {{ result }} Control structures If, elseif, and else {% var number = 1 %} {% if number == 0 %} Equal to 0 {% elseif number >= 1 %} Greater than or equal to 1 {% elseif number > 2 %} Greater than 2 {% elseif number <= 3 %} Less than or equal to 3 {% elseif number < 4 %} Less than 4 {% else %} Greater than or equal to 4 {% endif %} For loop {% for item in array %} {{ item }} {% endfor %} {% for index, item in array %} {{ index }}, {{ item }} {% endfor %} {% for key, value in dictionary %} {{ key }}, {{ value }} {% endfor %} {% for number in 0..<3 %} {{ number }} {% endfor %} {% for number in 1...4 %} {{ number }} {% endfor %} While loop {% var number = 0 %} {% var maxNumber = 3 %} {% while number < maxNumber %} {{ number }} {% number += 1 %} {% endwhile %} Blocks <!doctype html> < html lang = \"en\" > < head > < title > {% block title %}{% endblock %} </ title > </ head > < body > {% block body %} {% block header %}{% endblock %} < div class = \"container\" > {% block content %}{% endblock %} </ div > {% block footer %}{% endblock %} {% endblock %} </ body > </ html > Including other templates {% block body %} {% include \"header.html\" %} < div class = \"container\" > {% block content %}{% endblock %} </ div > {% include \"footer.html\" %} {% endblock %} Template inheritance /templates/base.html <!doctype html> < html lang = \"en\" > < head > < title > {% block title %}{{ title }}{% endblock %} </ title > {% block css %} < link href = \"/public/css/base.min.css\" rel = \"stylesheet\" /> {% endblock %} </ head > < body > {% block body %}{% endblock %} {% block js %} < script src = \"/public/js/base.min.js\" ></ script > {% endblock %} </ body > </ html > /templates/posts.html {% extend \"base.html\" %} {% block css %} {% super %} < link href = \"/public/css/posts.min.css\" rel = \"stylesheet\" /> {% endblock %} {% block js %} {% super %} < script src = \"/public/js/posts.min.js\" ></ script > {% endblock %} {% block body %} < h2 > All posts </ h2 > {% for post in posts %} < p > {{ post.title }} </ p > {% endfor %} {% endblock %} import Yaproq struct Post : Encodable { var title : String } let templating = Yaproq ( configuration : . init ( directories : Set ( arrayLiteral : \"/templates\" ))) do { let templateName = \"posts.html\" let context : [ String : Encodable ] = [ \"title\" : \"Posts\" , \"posts\" : [ Post ( title : \"Post 1\" ), Post ( title : \"Post 2\" ), Post ( title : \"Post 2\" ) ] ] let result = try templating . renderTemplate ( named : templateName , in : context ) print ( result ) } catch { print ( error ) } Custom delimiters import Yaproq do { let templating = Yaproq ( configuration : try . init ( delimiters : [ . comment ( \"{^\" , \"^}\" ), . output ( \"{$\" , \"$}\" ), . statement ( \"{@\" , \"@}\" ) ] ) ) } catch { print ( error ) } Loading templates Name import Yaproq let templating = Yaproq ( configuration : . init ( directories : Set ( arrayLiteral : \"/templates\" ))) do { let templateName = \"base.html\" let template = try templating . loadTemplate ( named : templateName ) print ( template ) } catch { print ( error ) } Path import Yaproq let templating = Yaproq () do { let templatePath = \"/templates/base.html\" let template = try templating . loadTemplate ( at : templatePath ) print ( template ) } catch { print ( error ) } Rendering templates Name import Yaproq let templating = Yaproq ( configuration : . init ( directories : Set ( arrayLiteral : \"/templates\" ))) do { let templateName = \"base.html\" let context : [ String : Encodable ] = [ \"title\" : \"My Blog\" ] let result = try templating . renderTemplate ( named : templateName , in : context ) print ( result ) } catch { print ( error ) } Path import Yaproq let templating = Yaproq () do { let templatePath = \"/templates/base.html\" let context : [ String : Encodable ] = [ \"title\" : \"My Blog\" ] let result = try templating . renderTemplate ( at : templatePath , in : context ) print ( result ) } catch { print ( error ) } Template import Yaproq let templating = Yaproq () do { let templatePath = \"/templates/base.html\" let template = try templating . loadTemplate ( at : templatePath ) let context : [ String : Encodable ] = [ \"title\" : \"My Blog\" ] let result = try templating . renderTemplate ( template , in : context ) print ( result ) } catch { print ( error ) } Error handling import Yaproq let templating = Yaproq () do { let templatePath = \"/templates/base.html\" let context : [ String : Encodable ] = [ \"title\" : \"My Blog\" ] let result = try templating . renderTemplate ( at : templatePath , in : context ) print ( result ) } catch { if let error = error as ? YaproqError { // YaproqError occurs when there is a problem with a custom configuration provided, for example, due to invalid or non-unique delimiters provided for each delimiter type. print ( error ) } else if let error = error as ? TemplateError { // TemplateError occurs when there is a problem with a template file itself, for example, the templating engine can't find and load it. print ( error ) } else if let error = error as ? SyntaxError { // SyntaxError occurs when an existing feature is used incorrectly and can't be parsed. print ( error ) } else if let error = error as ? RuntimeError { // RuntimeError occurs when the templating engine can't interpret an expression or statement because an output is semantically incorrect. print ( error ) } else { print ( \"Unknown error: \\( error ) \" ) } }","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#comments","text":"{# A single-line comment #} {# A multi-line comment #}","title":"Comments"},{"location":"usage/#variables","text":"{% var int = 1 %} {% var float = 2.0 %} {% var string = \"some text\" %} {% var booleanTrue = true %} {% var booleanFalse = false %} {% var range = 0.. < 3 %} {% var closedRange = 1...4 %} {% var item0 = array[0] %} {% var value = dictionary[key] %}","title":"Variables"},{"location":"usage/#math-expressions","text":"{% var five = 5.0 %} {% var four = 4 %} {% var three = 3 %} {% var two = 2.0 %} {% var seven = 7.0 %} {% var six = 6 %} {% var one = 1.0 %} {% var result = five * four / (three + two) - seven % six ^ one %} {{ result }}","title":"Math expressions"},{"location":"usage/#control-structures","text":"","title":"Control structures"},{"location":"usage/#if-elseif-and-else","text":"{% var number = 1 %} {% if number == 0 %} Equal to 0 {% elseif number >= 1 %} Greater than or equal to 1 {% elseif number > 2 %} Greater than 2 {% elseif number <= 3 %} Less than or equal to 3 {% elseif number < 4 %} Less than 4 {% else %} Greater than or equal to 4 {% endif %}","title":"If, elseif, and else"},{"location":"usage/#for-loop","text":"{% for item in array %} {{ item }} {% endfor %} {% for index, item in array %} {{ index }}, {{ item }} {% endfor %} {% for key, value in dictionary %} {{ key }}, {{ value }} {% endfor %} {% for number in 0..<3 %} {{ number }} {% endfor %} {% for number in 1...4 %} {{ number }} {% endfor %}","title":"For loop"},{"location":"usage/#while-loop","text":"{% var number = 0 %} {% var maxNumber = 3 %} {% while number < maxNumber %} {{ number }} {% number += 1 %} {% endwhile %}","title":"While loop"},{"location":"usage/#blocks","text":"<!doctype html> < html lang = \"en\" > < head > < title > {% block title %}{% endblock %} </ title > </ head > < body > {% block body %} {% block header %}{% endblock %} < div class = \"container\" > {% block content %}{% endblock %} </ div > {% block footer %}{% endblock %} {% endblock %} </ body > </ html >","title":"Blocks"},{"location":"usage/#including-other-templates","text":"{% block body %} {% include \"header.html\" %} < div class = \"container\" > {% block content %}{% endblock %} </ div > {% include \"footer.html\" %} {% endblock %}","title":"Including other templates"},{"location":"usage/#template-inheritance","text":"","title":"Template inheritance"},{"location":"usage/#templatesbasehtml","text":"<!doctype html> < html lang = \"en\" > < head > < title > {% block title %}{{ title }}{% endblock %} </ title > {% block css %} < link href = \"/public/css/base.min.css\" rel = \"stylesheet\" /> {% endblock %} </ head > < body > {% block body %}{% endblock %} {% block js %} < script src = \"/public/js/base.min.js\" ></ script > {% endblock %} </ body > </ html >","title":"/templates/base.html"},{"location":"usage/#templatespostshtml","text":"{% extend \"base.html\" %} {% block css %} {% super %} < link href = \"/public/css/posts.min.css\" rel = \"stylesheet\" /> {% endblock %} {% block js %} {% super %} < script src = \"/public/js/posts.min.js\" ></ script > {% endblock %} {% block body %} < h2 > All posts </ h2 > {% for post in posts %} < p > {{ post.title }} </ p > {% endfor %} {% endblock %} import Yaproq struct Post : Encodable { var title : String } let templating = Yaproq ( configuration : . init ( directories : Set ( arrayLiteral : \"/templates\" ))) do { let templateName = \"posts.html\" let context : [ String : Encodable ] = [ \"title\" : \"Posts\" , \"posts\" : [ Post ( title : \"Post 1\" ), Post ( title : \"Post 2\" ), Post ( title : \"Post 2\" ) ] ] let result = try templating . renderTemplate ( named : templateName , in : context ) print ( result ) } catch { print ( error ) }","title":"/templates/posts.html"},{"location":"usage/#custom-delimiters","text":"import Yaproq do { let templating = Yaproq ( configuration : try . init ( delimiters : [ . comment ( \"{^\" , \"^}\" ), . output ( \"{$\" , \"$}\" ), . statement ( \"{@\" , \"@}\" ) ] ) ) } catch { print ( error ) }","title":"Custom delimiters"},{"location":"usage/#loading-templates","text":"","title":"Loading templates"},{"location":"usage/#name","text":"import Yaproq let templating = Yaproq ( configuration : . init ( directories : Set ( arrayLiteral : \"/templates\" ))) do { let templateName = \"base.html\" let template = try templating . loadTemplate ( named : templateName ) print ( template ) } catch { print ( error ) }","title":"Name"},{"location":"usage/#path","text":"import Yaproq let templating = Yaproq () do { let templatePath = \"/templates/base.html\" let template = try templating . loadTemplate ( at : templatePath ) print ( template ) } catch { print ( error ) }","title":"Path"},{"location":"usage/#rendering-templates","text":"","title":"Rendering templates"},{"location":"usage/#name_1","text":"import Yaproq let templating = Yaproq ( configuration : . init ( directories : Set ( arrayLiteral : \"/templates\" ))) do { let templateName = \"base.html\" let context : [ String : Encodable ] = [ \"title\" : \"My Blog\" ] let result = try templating . renderTemplate ( named : templateName , in : context ) print ( result ) } catch { print ( error ) }","title":"Name"},{"location":"usage/#path_1","text":"import Yaproq let templating = Yaproq () do { let templatePath = \"/templates/base.html\" let context : [ String : Encodable ] = [ \"title\" : \"My Blog\" ] let result = try templating . renderTemplate ( at : templatePath , in : context ) print ( result ) } catch { print ( error ) }","title":"Path"},{"location":"usage/#template","text":"import Yaproq let templating = Yaproq () do { let templatePath = \"/templates/base.html\" let template = try templating . loadTemplate ( at : templatePath ) let context : [ String : Encodable ] = [ \"title\" : \"My Blog\" ] let result = try templating . renderTemplate ( template , in : context ) print ( result ) } catch { print ( error ) }","title":"Template"},{"location":"usage/#error-handling","text":"import Yaproq let templating = Yaproq () do { let templatePath = \"/templates/base.html\" let context : [ String : Encodable ] = [ \"title\" : \"My Blog\" ] let result = try templating . renderTemplate ( at : templatePath , in : context ) print ( result ) } catch { if let error = error as ? YaproqError { // YaproqError occurs when there is a problem with a custom configuration provided, for example, due to invalid or non-unique delimiters provided for each delimiter type. print ( error ) } else if let error = error as ? TemplateError { // TemplateError occurs when there is a problem with a template file itself, for example, the templating engine can't find and load it. print ( error ) } else if let error = error as ? SyntaxError { // SyntaxError occurs when an existing feature is used incorrectly and can't be parsed. print ( error ) } else if let error = error as ? RuntimeError { // RuntimeError occurs when the templating engine can't interpret an expression or statement because an output is semantically incorrect. print ( error ) } else { print ( \"Unknown error: \\( error ) \" ) } }","title":"Error handling"}]}